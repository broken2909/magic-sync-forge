#!/bin/bash
echo "üîß CORRECTION V√âRIFI√âE - D√©lai TTS"

cd /data/data/com.termux/files/home/magic-sync-forge/

# ==================== V√âRIFICATIONS PR√âALABLES ====================
echo "=== üîç V√âRIFICATIONS PR√âALABLES ==="

# 1. V√©rifier fichier existe
if [ ! -f "app/src/main/java/com/magiccontrol/service/WakeWordService.kt" ]; then
    echo "‚ùå Fichier WakeWordService.kt manquant"
    exit 1
fi
echo "‚úÖ Fichier pr√©sent"

# 2. V√©rifier syntaxe actuelle
echo "=== üìã CONTENU ACTUEL (extrait) ==="
grep -A 5 -B 5 "postDelayed" app/src/main/java/com/magiccontrol/service/WakeWordService.kt

# 3. V√©rifier structure braces
start_braces=$(grep -o "{" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | wc -l)
end_braces=$(grep -o "}" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | wc -l)
if [ "$start_braces" -ne "$end_braces" ]; then
    echo "‚ùå Braces d√©s√©quilibr√©es: $start_braces { vs $end_braces }"
    exit 1
fi
echo "‚úÖ Braces √©quilibr√©es: $start_braces"

# ==================== CR√âATION FICHIER CORRIG√â ====================
echo ""
echo "=== üõ†Ô∏è CR√âATION FICHIER CORRIG√â ==="

cat > app/src/main/java/com/magiccontrol/service/WakeWordService.kt << 'FILE'
package com.magiccontrol.service

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.util.Log
import androidx.core.app.NotificationCompat
import com.magiccontrol.recognizer.WakeWordDetector
import com.magiccontrol.tts.TTSManager
import com.magiccontrol.R

class WakeWordService : Service() {
    private lateinit var wakeWordDetector: WakeWordDetector
    private val TAG = "WakeWordService"
    private val CHANNEL_ID = "WakeWordServiceChannel"

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "Service de d√©tection cr√©√©")
        createNotificationChannel()
        wakeWordDetector = WakeWordDetector(applicationContext)

        wakeWordDetector.onWakeWordDetected = {
            Log.d(TAG, "Mot d activation d√©tect√©")
            startFullRecognition()
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "D√©marrage service d√©tection")

        val notification = createNotification()
        startForeground(1, notification)

        // ‚úÖ CORRECTION: √âcoute IMM√âDIATE
        startWakeWordDetection()

        // ‚úÖ TTS apr√®s 3s SANS bloquer l'√©coute
        Handler(Looper.getMainLooper()).postDelayed({
            TTSManager.speak(applicationContext, applicationContext.getString(R.string.activation_prompt))
        }, 3000L)

        return START_STICKY
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val serviceChannel = NotificationChannel(
                CHANNEL_ID,
                "Service D√©tection Vocale",
                NotificationManager.IMPORTANCE_LOW
            )
            val manager = getSystemService(NotificationManager::class.java)
            manager.createNotificationChannel(serviceChannel)
        }
    }

    private fun createNotification(): Notification {
        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("MagicControl")
            .setContentText("√âcoute activation...")
            .setSmallIcon(android.R.drawable.ic_media_play)
            .build()
    }

    private fun startWakeWordDetection() {
        try {
            wakeWordDetector.startListening()
            Log.d(TAG, "D√©tection d√©marr√©e")
        } catch (e: Exception) {
            Log.e(TAG, "Erreur d√©marrage d√©tection", e)
        }
    }

    private fun startFullRecognition() {
        val intent = Intent(this, FullRecognitionService::class.java)
        startService(intent)
        Log.d(TAG, "Reconnaissance d√©marr√©e")
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "Arr√™t service d√©tection")
        wakeWordDetector.stopListening()
    }

    override fun onBind(intent: Intent?): IBinder? = null
}
FILE

# ==================== V√âRIFICATIONS FINALES ====================
echo ""
echo "=== ‚úÖ V√âRIFICATIONS FINALES ==="

# 1. V√©rifier fichier cr√©√©
if [ ! -f "app/src/main/java/com/magiccontrol/service/WakeWordService.kt" ]; then
    echo "‚ùå Fichier non cr√©√©"
    exit 1
fi
echo "‚úÖ Fichier cr√©√©"

# 2. V√©rifier syntaxe modifications
echo "=== üìã MODIFICATIONS APPLIQU√âES ==="
grep -A 3 -B 3 "startWakeWordDetection()" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | head -10

# 3. V√©rifier braces √©quilibr√©es
new_start_braces=$(grep -o "{" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | wc -l)
new_end_braces=$(grep -o "}" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | wc -l)
if [ "$new_start_braces" -ne "$new_end_braces" ]; then
    echo "‚ùå Braces d√©s√©quilibr√©es apr√®s modification"
    exit 1
fi
echo "‚úÖ Braces √©quilibr√©es apr√®s modification: $new_start_braces"

# 4. V√©rifier encoding
if ! file app/src/main/java/com/magiccontrol/service/WakeWordService.kt | grep -q "UTF-8"; then
    echo "‚ö†Ô∏è  Encoding non UTF-8 d√©tect√©"
fi

echo ""
echo "üéØ CORRECTION APPLIQU√âE AVEC SUCC√àS"
echo "üìä R√©sum√©: √âcoute imm√©diate + TTS apr√®s 3s (non bloquant)"
echo "üöÄ PUSH: git add . && git commit -m 'FIX: √âcoute imm√©diate sans blocage TTS' && git push"
