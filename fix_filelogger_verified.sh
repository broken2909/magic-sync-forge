#!/bin/bash
echo "üîß CORRECTION AVEC V√âRIFICATIONS COMPL√àTES"

cd /data/data/com.termux/files/home/magic-sync-forge/

# ==================== V√âRIFICATIONS PR√âALABLES ====================
echo "=== üîç V√âRIFICATIONS PR√âALABLES ==="

# 1. V√©rifier encoding fichier
echo "=== üìù ENCODING ==="
file -i app/src/main/java/com/magiccontrol/utils/FileLogger.kt 2>/dev/null || echo "‚ö†Ô∏è  Commande file non disponible"

# 2. V√©rifier caract√®res invisibles
echo "=== üëª CARACT√àRES INVISIBLES ==="
cat -A app/src/main/java/com/magiccontrol/utils/FileLogger.kt | head -5

# ==================== CORRECTION ====================
echo ""
echo "=== üõ†Ô∏è CR√âATION FICHIER CORRIG√â ==="

cat > app/src/main/java/com/magiccontrol/utils/FileLogger.kt << 'FILE'
package com.magiccontrol.utils

import android.content.Context
import android.util.Log
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

object FileLogger {
    private const val TAG = "FileLogger"
    
    fun logToFile(context: Context, message: String) {
        try {
            val timestamp = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
            val logMessage = "[$timestamp] $message\n"
            
            // Log syst√®me
            Log.d(TAG, message)
            
            // Log fichier interne
            val file = File(context.filesDir, "app_debug.log")
            FileOutputStream(file, true).use { fos ->
                fos.write(logMessage.toByteArray())
            }
        } catch (e: Exception) {
            Log.e(TAG, "Erreur √©criture log fichier", e)
        }
    }
    
    fun getLogFile(context: Context): File {
        return File(context.filesDir, "app_debug.log")
    }
}
FILE

# ==================== V√âRIFICATIONS FINALES ====================
echo ""
echo "=== ‚úÖ V√âRIFICATIONS FINALES ==="

# 1. V√©rifier fichier cr√©√©
if [ ! -f "app/src/main/java/com/magiccontrol/utils/FileLogger.kt" ]; then
    echo "‚ùå Fichier non cr√©√©"
    exit 1
fi
echo "‚úÖ Fichier cr√©√©"

# 2. V√©rifier syntaxe Kotlin basique
echo "=== üìã SYNTAXE KOTLIN ==="
if grep -q "const val TAG" app/src/main/java/com/magiccontrol/utils/FileLogger.kt; then
    echo "‚úÖ D√©claration TAG correcte"
else
    echo "‚ùå Erreur d√©claration TAG"
    exit 1
fi

# 3. V√©rifier braces √©quilibr√©es
start_braces=$(grep -o "{" app/src/main/java/com/magiccontrol/utils/FileLogger.kt | wc -l)
end_braces=$(grep -o "}" app/src/main/java/com/magiccontrol/utils/FileLogger.kt | wc -l)
if [ "$start_braces" -eq "$end_braces" ]; then
    echo "‚úÖ Braces √©quilibr√©es: $start_braces"
else
    echo "‚ùå Braces d√©s√©quilibr√©es: $start_braces { vs $end_braces }"
    exit 1
fi

# 4. V√©rifier imports valides
echo "=== üì¶ IMPORTS ==="
if grep -q "import android.content.Context" app/src/main/java/com/magiccontrol/utils/FileLogger.kt && \
   grep -q "import android.util.Log" app/src/main/java/com/magiccontrol/utils/FileLogger.kt; then
    echo "‚úÖ Imports Android valides"
else
    echo "‚ùå Imports manquants"
    exit 1
fi

# 5. V√©rifier pas d'erreurs √©videntes
echo "=== üö® ERREURS POTENTIELLES ==="
if grep -q "Expecting member declaration" app/src/main/java/com/magiccontrol/utils/FileLogger.kt; then
    echo "‚ùå Erreur de d√©claration d√©tect√©e"
    exit 1
fi
echo "‚úÖ Aucune erreur √©vidente"

# 6. V√©rifier lignes vides et format
echo "=== üìè STRUCTURE ==="
total_lines=$(wc -l < app/src/main/java/com/magiccontrol/utils/FileLogger.kt)
empty_lines=$(grep -c "^$" app/src/main/java/com/magiccontrol/utils/FileLogger.kt)
echo "üìä Lignes totales: $total_lines, Lignes vides: $empty_lines"

echo ""
echo "üéØ CORRECTION COMPL√àTE ET V√âRIFI√âE"
echo "üìä 6 v√©rifications pass√©es avec succ√®s"
echo "üöÄ PUSH: git add . && git commit -m 'FIX: FileLogger corrig√© avec v√©rifications compl√®tes' && git push"
