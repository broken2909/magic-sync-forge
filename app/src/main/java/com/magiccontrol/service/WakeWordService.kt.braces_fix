package com.magiccontrol.service

import android.app.*
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.IBinder
import android.os.Handler
import android.os.Looper
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import com.magiccontrol.MainActivity
import com.magiccontrol.recognizer.WakeWordDetector
import com.magiccontrol.tts.TTSManager
import com.magiccontrol.R
import com.magiccontrol.utils.PreferencesManager

class WakeWordService : Service() {

    private var wakeWordDetector: WakeWordDetector? = null
    private val TAG = "WakeWordService"
    private val NOTIFICATION_ID = 1001
    private val CHANNEL_ID = "MAGIC_CONTROL_CHANNEL"
    private var serviceStarted = false

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üîÑ WakeWordService onCreate()")
        createNotificationChannel()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "üöÄ D√©marrage du service vocal")
        
        if (serviceStarted) {
            Log.d(TAG, "‚ö†Ô∏è Service d√©j√† actif")
            return START_STICKY
        }

        try {
            startForegroundService()
            initializeAudioDetector()
            serviceStarted = true
            Log.d(TAG, "‚úÖ Service vocal activ√© avec succ√®s")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur d√©marrage service", e)
            TTSManager.speak(applicationContext, "Erreur d√©marrage service vocal")
            return START_NOT_STICKY
        }

        return START_STICKY
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Magic Control Voice Service",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "Service de reconnaissance vocale Magic Control"
                setShowBadge(false)
                setSound(null, null)
            }
            
            val manager = getSystemService(NotificationManager::class.java)
            manager?.createNotificationChannel(channel)
        }
    }

    private fun startForegroundService() {
        val notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("üé§ Magic Control Actif")
            .setContentText("Micro pr√™t - Dites 'Magic'")
            .setSmallIcon(android.R.drawable.ic_btn_speak_now)
            .setOngoing(true)
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .build()

        startForeground(NOTIFICATION_ID, notification)
        Log.d(TAG, "üì± Notification foreground activ√©e")
    }

    private fun initializeAudioDetector() {
        try {
            Log.d(TAG, "üéØ Initialisation du d√©tecteur audio...")
            
            wakeWordDetector = WakeWordDetector(applicationContext)
            
            wakeWordDetector?.onWakeWordDetected = {
                Log.d(TAG, "üéâ MOT-CL√â D√âTECT√â!")
                onWakeWordDetected()
            }

            // D√©lai avant d√©marrage de l'√©coute
            Handler(Looper.getMainLooper()).postDelayed({
                startListening()
            }, 1000L)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur initialisation d√©tecteur", e)
            TTSManager.speak(applicationContext, "Erreur initialisation microphone")
        }
    }

    private fun startListening() {
        try {
            val success = wakeWordDetector?.startListening() ?: false
            
            if (success) {
                Log.d(TAG, "üëÇ √âcoute audio ACTIV√âE")
                TTSManager.speak(applicationContext, "Magic Control activ√©. Dites Magic pour commander.")
            } else {
                Log.e(TAG, "‚ùå √âchec d√©marrage √©coute")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur d√©marrage √©coute", e)
        }
    }

    private fun onWakeWordDetected() {
    Log.d(TAG, "üéØ Traitement mot-cl√© d√©tect√© - Transition vers reconnaissance")
    
    try {
        // 1. Feedback vocal imm√©diat
        TTSManager.speak(applicationContext, "Oui?")
        
        // 2. D√©marrer reconnaissance compl√®te IMM√âDIATEMENT
        val intent = Intent(this, FullRecognitionService::class.java)
        startService(intent)
        Log.d(TAG, "üöÄ FullRecognitionService d√©marr√©")
        
        // 3. Arr√™ter √©coute actuelle APR√àS d√©marrage nouveau service
        Handler(Looper.getMainLooper()).postDelayed({
            Log.d(TAG, "üîÑ Arr√™t √©coute wake word")
            wakeWordDetector?.stopListening()
        }, 500L)
        
    } catch (e: Exception) {
        Log.e(TAG, "‚ùå Erreur transition services", e)
    }
} catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur traitement mot-cl√©", e)
        }
    }

    private fun hasMicrophonePermission(): Boolean {
        return ContextCompat.checkSelfPermission(
            this,
            android.Manifest.permission.RECORD_AUDIO
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "üõë Arr√™t du service vocal")
        
        try {
            wakeWordDetector?.stopListening()
            wakeWordDetector = null
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage d√©tecteur", e)
        }
        
        serviceStarted = false
    }

    override fun onBind(intent: Intent?): IBinder? = null
}
}