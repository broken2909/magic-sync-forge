#!/bin/bash
echo "üîß R√âTABLISSEMENT TTS AVEC V√âRIFICATIONS"

cd /data/data/com.termux/files/home/magic-sync-forge/

# ==================== V√âRIFICATIONS PR√âALABLES ====================
echo "=== üîç √âTAT ACTUEL WAKE WORDSERVICE ==="

# 1. V√©rifier imports TTS
if grep -q "import.*TTSManager" app/src/main/java/com/magiccontrol/service/WakeWordService.kt; then
    echo "‚úÖ Import TTSManager pr√©sent"
else
    echo "‚ùå Import TTSManager MANQUANT"
fi

# 2. V√©rifier appel TTS
if grep -q "TTSManager.speak" app/src/main/java/com/magiccontrol/service/WakeWordService.kt; then
    echo "‚úÖ Appel TTS pr√©sent"
else
    echo "‚ùå Appel TTS MANQUANT"
fi

# ==================== CORRECTION ====================
echo ""
echo "=== üõ†Ô∏è R√âTABLISSEMENT TTS ==="

# Cr√©er version avec TTS r√©tabli
cat > app/src/main/java/com/magiccontrol/service/WakeWordService.kt << 'FILE'
package com.magiccontrol.service

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.util.Log
import androidx.core.app.NotificationCompat
import com.magiccontrol.recognizer.WakeWordDetector
import com.magiccontrol.tts.TTSManager
import com.magiccontrol.R

class WakeWordService : Service() {
    private lateinit var wakeWordDetector: WakeWordDetector
    private val TAG = "WakeWordService"
    private val CHANNEL_ID = "WakeWordServiceChannel"

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "Service de d√©tection cr√©√©")
        createNotificationChannel()
        wakeWordDetector = WakeWordDetector(applicationContext)

        wakeWordDetector.onWakeWordDetected = {
            Log.d(TAG, "Mot d activation d√©tect√©")
            startFullRecognition()
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "D√©marrage service d√©tection")

        val notification = createNotification()
        startForeground(1, notification)

        // ‚úÖ √âcoute imm√©diate
        startWakeWordDetection()
        Log.d(TAG, "‚úÖ √âcoute IMM√âDIATEMENT activ√©e")

        // ‚úÖ R√âTABLISSEMENT TTS - Message apr√®s 2 secondes
        Handler(Looper.getMainLooper()).postDelayed({
            Log.d(TAG, "üîä Lancement message TTS...")
            TTSManager.speak(applicationContext, applicationContext.getString(R.string.activation_prompt))
            Log.d(TAG, "üîä Message TTS envoy√©")
        }, 2000L)

        return START_STICKY
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val serviceChannel = NotificationChannel(
                CHANNEL_ID,
                "Service D√©tection Vocale",
                NotificationManager.IMPORTANCE_LOW
            )
            val manager = getSystemService(NotificationManager::class.java)
            manager.createNotificationChannel(serviceChannel)
        }
    }

    private fun createNotification(): Notification {
        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("MagicControl")
            .setContentText("√âcoute activation...")
            .setSmallIcon(android.R.drawable.ic_media_play)
            .build()
    }

    private fun startWakeWordDetection() {
        try {
            wakeWordDetector.startListening()
            Log.d(TAG, "D√©tection d√©marr√©e")
        } catch (e: Exception) {
            Log.e(TAG, "Erreur d√©marrage d√©tection", e)
        }
    }

    private fun startFullRecognition() {
        val intent = Intent(this, FullRecognitionService::class.java)
        startService(intent)
        Log.d(TAG, "Reconnaissance d√©marr√©e")
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "Arr√™t service d√©tection")
        wakeWordDetector.stopListening()
    }

    override fun onBind(intent: Intent?): IBinder? = null
}
FILE

# ==================== V√âRIFICATIONS FINALES ====================
echo ""
echo "=== ‚úÖ V√âRIFICATIONS FINALES ==="

# 1. V√©rifier fichier cr√©√©
if [ ! -f "app/src/main/java/com/magiccontrol/service/WakeWordService.kt" ]; then
    echo "‚ùå Fichier non cr√©√©"
    exit 1
fi

# 2. V√©rifier import TTS
if grep -q "import.*TTSManager" app/src/main/java/com/magiccontrol/service/WakeWordService.kt; then
    echo "‚úÖ Import TTSManager r√©tabli"
else
    echo "‚ùå Import TTSManager manquant"
    exit 1
fi

# 3. V√©rifier appel TTS
if grep -q "TTSManager.speak.*activation_prompt" app/src/main/java/com/magiccontrol/service/WakeWordService.kt; then
    echo "‚úÖ Appel TTS r√©tabli"
else
    echo "‚ùå Appel TTS manquant"
    exit 1
fi

# 4. V√©rifier d√©lai
if grep -q "postDelayed.*2000L" app/src/main/java/com/magiccontrol/service/WakeWordService.kt; then
    echo "‚úÖ D√©lai TTS configur√© (2 secondes)"
else
    echo "‚ùå D√©lai TTS manquant"
    exit 1
fi

# 5. V√©rifier braces
start_braces=$(grep -o "{" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | wc -l)
end_braces=$(grep -o "}" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | wc -l)
if [ "$start_braces" -eq "$end_braces" ]; then
    echo "‚úÖ Braces √©quilibr√©es: $start_braces"
else
    echo "‚ùå Braces d√©s√©quilibr√©es"
    exit 1
fi

echo ""
echo "üéØ TTS R√âTABLI ET V√âRIFI√â"
echo "üìä 5 v√©rifications pass√©es - Message vocal activ√© apr√®s 2 secondes"
echo "üöÄ PUSH: git add . && git commit -m 'FIX: R√©tablissement TTS activation_prompt avec v√©rifications' && git push"
