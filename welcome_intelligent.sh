#!/bin/bash
echo "üé§ WELCOME INTELLIGENT POUR MALVOYANTS"

# 1. Recr√©er WelcomeManager pour premi√®re ouverture seulement
mkdir -p app/src/main/java/com/magiccontrol/utils
cat > app/src/main/java/com/magiccontrol/utils/WelcomeManager.kt << 'WELCOME'
package com.magiccontrol.utils

import android.content.Context
import android.content.SharedPreferences
import java.util.Locale

object WelcomeManager {
    private const val PREFS_WELCOME = "welcome_prefs"
    private const val KEY_FIRST_LAUNCH = "first_launch"
    private const val KEY_WELCOME_SHOWN = "welcome_shown"

    fun isFirstLaunch(context: Context): Boolean {
        val prefs = context.getSharedPreferences(PREFS_WELCOME, Context.MODE_PRIVATE)
        return prefs.getBoolean(KEY_FIRST_LAUNCH, true)
    }

    fun shouldShowWelcome(context: Context): Boolean {
        val prefs = context.getSharedPreferences(PREFS_WELCOME, Context.MODE_PRIVATE)
        return !prefs.getBoolean(KEY_WELCOME_SHOWN, false)
    }

    fun markWelcomeShown(context: Context) {
        val prefs = context.getSharedPreferences(PREFS_WELCOME, Context.MODE_PRIVATE)
        prefs.edit().putBoolean(KEY_WELCOME_SHOWN, true).apply()
    }

    fun markFirstLaunchComplete(context: Context) {
        val prefs = context.getSharedPreferences(PREFS_WELCOME, Context.MODE_PRIVATE)
        prefs.edit().putBoolean(KEY_FIRST_LAUNCH, false).apply()
    }

    fun getWelcomeMessage(): String {
        val currentLocale = Locale.getDefault().language
        return when (currentLocale) {
            "fr" -> "Bienvenue dans votre assistant vocal MagicControl"
            "en" -> "Welcome to your MagicControl voice assistant"
            "es" -> "Bienvenido a su asistente de voz MagicControl"
            "de" -> "Willkommen bei Ihrem MagicControl-Sprachassistenten"
            "it" -> "Benvenuto nel tuo assistente vocale MagicControl"
            "pt" -> "Bem-vindo ao seu assistente de voz MagicControl"
            "ar" -> "ŸÖÿ±ÿ≠ÿ®Ÿãÿß ÿ®ŸÉ ŸÅŸä ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿµŸàÿ™Ÿä MagicControl"
            "ru" -> "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ MagicControl"
            "zh" -> "Ê¨¢Ëøé‰ΩøÁî®ÊÇ®ÁöÑ MagicControl ËØ≠Èü≥Âä©Êâã"
            "ja" -> "MagicControlÈü≥Â£∞„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Å∏„Çà„ÅÜ„Åì„Åù"
            else -> "Welcome to your MagicControl voice assistant"
        }
    }
}
WELCOME

# 2. MainActivity avec logique intelligente
cat > app/src/main/java/com/magiccontrol/MainActivity.kt << 'ACTIVITY'
package com.magiccontrol

import android.content.Intent
import android.content.pm.PackageManager
import android.media.MediaPlayer
import android.os.Bundle
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.magiccontrol.tts.TTSManager
import com.magiccontrol.utils.WelcomeManager

class MainActivity : AppCompatActivity() {

    private val audioPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            onMicrophoneGranted()
        } else {
            onMicrophoneDenied()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // ‚úÖ INITIALISATION TTS
        TTSManager.initialize(this)
        
        // ‚úÖ WELCOME INTELLIGENT
        handleWelcomeLogic()
        checkMicrophonePermission()
    }

    private fun handleWelcomeLogic() {
        // ‚úÖ SON TOAST TOUJOURS
        playToastSound()
        
        // ‚úÖ WELCOME VOCAL UNE SEULE FOIS
        if (WelcomeManager.shouldShowWelcome(this)) {
            val welcomeMessage = WelcomeManager.getWelcomeMessage()
            TTSManager.speak(this, welcomeMessage)
            WelcomeManager.markWelcomeShown(this)
            WelcomeManager.markFirstLaunchComplete(this)
        }
    }

    private fun playToastSound() {
        try {
            val mediaPlayer = MediaPlayer.create(this, R.raw.welcome_sound)
            mediaPlayer?.setOnCompletionListener { mp ->
                mp.release()
            }
            mediaPlayer?.start()
        } catch (e: Exception) {
            // Son non critique
        }
    }

    private fun checkMicrophonePermission() {
        if (ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.RECORD_AUDIO
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            onMicrophoneGranted()
        } else {
            audioPermissionLauncher.launch(android.Manifest.permission.RECORD_AUDIO)
        }
    }

    private fun onMicrophoneGranted() {
        // ‚úÖ "MagicControl activ√©" sera dit apr√®s d√©tection "Magic"
        // Pour l'instant, rien ou message simple
        if (WelcomeManager.isFirstLaunch(this)) {
            TTSManager.speak(this, "Microphone autoris√©")
        }
    }

    private fun onMicrophoneDenied() {
        Toast.makeText(this, "Microphone refus√©", Toast.LENGTH_LONG).show()
    }
}
ACTIVITY

echo "‚úÖ WELCOME INTELLIGENT CONFIGUR√â!"
echo "üìä Logique pour malvoyants:"
echo "   - ‚úÖ Premier lancement: 'Bienvenue dans votre assistant vocal MagicControl'"
echo "   - ‚úÖ Langue syst√®me d√©tect√©e automatiquement"
echo "   - ‚úÖ Une seule fois apr√®s installation"
echo "   - ‚úÖ Son toast √† chaque ouverture"
echo "   - ‚úÖ 'MagicControl activ√©' r√©serv√© pour apr√®s d√©tection mot-cl√©"
echo ""
echo "üéØ PARFAIT POUR LES MALVOYANTS!"
