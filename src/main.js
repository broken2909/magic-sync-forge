// MagicControl - Syst√®me de reconnaissance vocale offline avec Vosk
// Application pour personnes malvoyantes - Respect total de la vie priv√©e

class MagicControlVosk {
    constructor() {
        this.isInitialized = false;
        this.recognizerFR = null;
        this.recognizerEN = null;
        this.currentLanguage = 'fr';
        this.isListening = false;
        this.audioContext = null;
        this.mediaStream = null;
        this.processor = null;
        
        this.init();
    }

    async init() {
        console.log('üé§ Initialisation de MagicControl...');
        await this.loadVoskModels();
        await this.setupAudio();
        this.setupUI();
        this.startListening();
    }

    async loadVoskModels() {
        try {
            console.log('üì¶ Chargement des mod√®les Vosk...');
            
            // Import dynamique de Vosk
            const { createModel, createRecognizer } = await import('vosk-browser');
            
            // URLs des mod√®les Vosk compacts pour le navigateur
            const modelUrlFR = 'https://alphacephei.com/vosk/models/vosk-model-small-fr-0.22.zip';
            const modelUrlEN = 'https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip';
            
            this.updateStatus('vosk-fr-status', '‚è≥ Chargement mod√®le FR...', 'loading');
            this.updateStatus('vosk-en-status', '‚è≥ Chargement mod√®le EN...', 'loading');
            
            // Chargement des mod√®les en parall√®le
            const [modelFR, modelEN] = await Promise.all([
                this.loadModel(createModel, modelUrlFR, 'FR'),
                this.loadModel(createModel, modelUrlEN, 'EN')
            ]);
            
            // Cr√©ation des recognizers
            this.recognizerFR = new createRecognizer(modelFR, 16000);
            this.recognizerEN = new createRecognizer(modelEN, 16000);
            
            this.updateStatus('vosk-fr-status', '‚úÖ Mod√®le FR: Pr√™t', 'ready');
            this.updateStatus('vosk-en-status', '‚úÖ Mod√®le EN: Pr√™t', 'ready');
            
            console.log('‚úÖ Mod√®les Vosk charg√©s avec succ√®s');
            
        } catch (error) {
            console.error('‚ùå Erreur chargement mod√®les Vosk:', error);
            this.updateStatus('vosk-fr-status', '‚ùå Erreur chargement FR', 'error');
            this.updateStatus('vosk-en-status', '‚ùå Erreur chargement EN', 'error');
        }
    }

    async loadModel(createModel, url, language) {
        try {
            console.log(`üì• T√©l√©chargement mod√®le ${language}...`);
            
            // Simulation du chargement pour la d√©mo
            // En production, il faudrait t√©l√©charger et d√©compresser le mod√®le
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Pour la d√©mo, on simule un mod√®le charg√©
            return { language, loaded: true };
            
        } catch (error) {
            console.error(`‚ùå Erreur chargement mod√®le ${language}:`, error);
            throw error;
        }
    }

    async setupAudio() {
        try {
            console.log('üéß Configuration audio...');
            
            // Demander l'acc√®s au microphone
            this.mediaStream = await navigator.mediaDevices.getUserMedia({
                audio: {
                    sampleRate: 16000,
                    channelCount: 1,
                    echoCancellation: true,
                    noiseSuppression: true
                }
            });

            // Cr√©er le contexte audio
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)({
                sampleRate: 16000
            });

            const source = this.audioContext.createMediaStreamSource(this.mediaStream);
            
            // Cr√©er un processeur audio pour Vosk
            this.processor = this.audioContext.createScriptProcessor(4096, 1, 1);
            
            source.connect(this.processor);
            this.processor.connect(this.audioContext.destination);
            
            this.updateStatus('audio-status', '‚úÖ Microphone: Pr√™t', 'ready');
            console.log('‚úÖ Audio configur√© avec succ√®s');
            
        } catch (error) {
            console.error('‚ùå Erreur configuration audio:', error);
            this.updateStatus('audio-status', '‚ùå Erreur microphone', 'error');
        }
    }

    startListening() {
        if (!this.processor || this.isListening) return;
        
        console.log('üëÇ D√©marrage de l\'√©coute...');
        this.isListening = true;
        
        this.processor.onaudioprocess = (event) => {
            if (!this.isListening) return;
            
            const inputBuffer = event.inputBuffer;
            const audioData = inputBuffer.getChannelData(0);
            
            // Convertir en format requis par Vosk (PCM 16-bit)
            const buffer = new Int16Array(audioData.length);
            for (let i = 0; i < audioData.length; i++) {
                buffer[i] = Math.max(-32768, Math.min(32767, audioData[i] * 32768));
            }
            
            // Envoyer √† Vosk pour reconnaissance
            this.processAudioWithVosk(buffer);
        };
    }

    processAudioWithVosk(audioBuffer) {
        try {
            const recognizer = this.currentLanguage === 'fr' ? this.recognizerFR : this.recognizerEN;
            
            if (!recognizer) return;
            
            // Simulation de la reconnaissance Vosk
            // En production, utiliser: recognizer.acceptWaveform(audioBuffer)
            this.simulateVoskRecognition(audioBuffer);
            
        } catch (error) {
            console.error('‚ùå Erreur reconnaissance Vosk:', error);
        }
    }

    simulateVoskRecognition(audioBuffer) {
        // Simulation simple bas√©e sur l'√©nergie audio
        const energy = audioBuffer.reduce((sum, sample) => sum + Math.abs(sample), 0) / audioBuffer.length;
        
        if (energy > 1000) { // Seuil arbitraire pour simulation
            const commands = this.currentLanguage === 'fr' ? 
                ['augmenter le volume', 'baisser le volume', 'activer wifi', 'ouvrir param√®tres', '√©teindre bluetooth'] :
                ['increase volume', 'decrease volume', 'enable wifi', 'open settings', 'turn off bluetooth'];
            
            const randomCommand = commands[Math.floor(Math.random() * commands.length)];
            this.handleRecognitionResult(randomCommand);
        }
    }

    handleRecognitionResult(text) {
        if (!text || text.trim() === '') return;
        
        console.log('üó£Ô∏è Reconnaissance:', text);
        
        // Afficher le r√©sultat
        const resultDiv = document.getElementById('recognition-result');
        resultDiv.innerHTML = `
            <strong>Commande reconnue:</strong><br>
            "${text}"<br>
            <small style="color: #8b949e;">Langue: ${this.currentLanguage.toUpperCase()}</small>
        `;
        
        // Traiter la commande
        this.executeVoiceCommand(text);
    }

    executeVoiceCommand(command) {
        const lowerCommand = command.toLowerCase();
        
        // Commandes syst√®me simul√©es
        if (lowerCommand.includes('volume') || lowerCommand.includes('son')) {
            console.log('üîä Commande volume d√©tect√©e');
            this.speak(this.currentLanguage === 'fr' ? 'Volume modifi√©' : 'Volume changed');
        }
        else if (lowerCommand.includes('wifi')) {
            console.log('üì∂ Commande WiFi d√©tect√©e');
            this.speak(this.currentLanguage === 'fr' ? 'WiFi modifi√©' : 'WiFi changed');
        }
        else if (lowerCommand.includes('param√®tres') || lowerCommand.includes('settings')) {
            console.log('‚öôÔ∏è Ouverture param√®tres');
            this.speak(this.currentLanguage === 'fr' ? 'Ouverture des param√®tres' : 'Opening settings');
        }
        else if (lowerCommand.includes('bluetooth')) {
            console.log('üîµ Commande Bluetooth d√©tect√©e');
            this.speak(this.currentLanguage === 'fr' ? 'Bluetooth modifi√©' : 'Bluetooth changed');
        }
        else if (lowerCommand.includes('fran√ßais') || lowerCommand.includes('french')) {
            this.switchLanguage('fr');
        }
        else if (lowerCommand.includes('anglais') || lowerCommand.includes('english')) {
            this.switchLanguage('en');
        }
    }

    switchLanguage(language) {
        this.currentLanguage = language;
        console.log(`üåç Changement de langue: ${language.toUpperCase()}`);
        this.speak(language === 'fr' ? 'Langue chang√©e en fran√ßais' : 'Language changed to English');
    }

    speak(text) {
        // Synth√®se vocale native du navigateur (offline)
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = this.currentLanguage === 'fr' ? 'fr-FR' : 'en-US';
            utterance.rate = 0.9;
            speechSynthesis.speak(utterance);
        }
    }

    updateStatus(elementId, text, className) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = text;
            element.className = `vosk-status ${className}`;
        }
    }

    setupUI() {
        // Ajouter les contr√¥les de langue
        const container = document.querySelector('.container');
        const controls = document.createElement('div');
        controls.innerHTML = `
            <div style="margin: 30px 0; padding: 20px; background: #21262d; border-radius: 10px;">
                <h3 style="color: #f0f6fc; margin-bottom: 15px;">Contr√¥les</h3>
                <button id="lang-fr" style="margin: 5px; padding: 10px 20px; background: #238636; color: white; border: none; border-radius: 5px; cursor: pointer;">Fran√ßais</button>
                <button id="lang-en" style="margin: 5px; padding: 10px 20px; background: #238636; color: white; border: none; border-radius: 5px; cursor: pointer;">English</button>
                <button id="toggle-listening" style="margin: 5px; padding: 10px 20px; background: #f85149; color: white; border: none; border-radius: 5px; cursor: pointer;">Arr√™ter</button>
            </div>
        `;
        
        container.appendChild(controls);
        
        // √âv√©nements des boutons
        document.getElementById('lang-fr').onclick = () => this.switchLanguage('fr');
        document.getElementById('lang-en').onclick = () => this.switchLanguage('en');
        document.getElementById('toggle-listening').onclick = () => this.toggleListening();
    }

    toggleListening() {
        const button = document.getElementById('toggle-listening');
        
        if (this.isListening) {
            this.isListening = false;
            button.textContent = this.currentLanguage === 'fr' ? 'D√©marrer' : 'Start';
            button.style.background = '#238636';
            console.log('‚è∏Ô∏è √âcoute arr√™t√©e');
        } else {
            this.isListening = true;
            button.textContent = this.currentLanguage === 'fr' ? 'Arr√™ter' : 'Stop';
            button.style.background = '#f85149';
            console.log('‚ñ∂Ô∏è √âcoute reprise');
        }
    }
}

// Initialisation automatique
document.addEventListener('DOMContentLoaded', () => {
    new MagicControlVosk();
});

console.log('üöÄ MagicControl initialis√© - Application de contr√¥le vocal offline pour malvoyants');