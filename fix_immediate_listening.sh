#!/bin/bash
echo "üîß CORRECTION √âCOUTE IMM√âDIATE - Plus de d√©lai 3 secondes"

cd /data/data/com.termux/files/home/magic-sync-forge/

# ==================== CORRECTION ====================
echo "=== üõ†Ô∏è SUPPRESSION D√âLAI √âCOUTE ==="

# Cr√©er version corrig√©e
cat > app/src/main/java/com/magiccontrol/service/WakeWordService.kt << 'FILE'
package com.magiccontrol.service

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.util.Log
import androidx.core.app.NotificationCompat
import com.magiccontrol.recognizer.WakeWordDetector
import com.magiccontrol.tts.TTSManager
import com.magiccontrol.R

class WakeWordService : Service() {
    private lateinit var wakeWordDetector: WakeWordDetector
    private val TAG = "WakeWordService"
    private val CHANNEL_ID = "WakeWordServiceChannel"

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "Service de d√©tection cr√©√©")
        createNotificationChannel()
        wakeWordDetector = WakeWordDetector(applicationContext)

        wakeWordDetector.onWakeWordDetected = {
            Log.d(TAG, "Mot d activation d√©tect√©")
            startFullRecognition()
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "D√©marrage service d√©tection")

        val notification = createNotification()
        startForeground(1, notification)

        // ‚úÖ CORRECTION: √âcoute IMM√âDIATE sans d√©lai
        startWakeWordDetection()
        Log.d(TAG, "‚úÖ √âcoute IMM√âDIATEMENT activ√©e")

        // ‚úÖ TTS apr√®s 3s SANS bloquer l'√©coute (optionnel)
        Handler(Looper.getMainLooper()).postDelayed({
            TTSManager.speak(applicationContext, applicationContext.getString(R.string.activation_prompt))
        }, 3000L)

        return START_STICKY
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val serviceChannel = NotificationChannel(
                CHANNEL_ID,
                "Service D√©tection Vocale",
                NotificationManager.IMPORTANCE_LOW
            )
            val manager = getSystemService(NotificationManager::class.java)
            manager.createNotificationChannel(serviceChannel)
        }
    }

    private fun createNotification(): Notification {
        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("MagicControl")
            .setContentText("√âcoute activation...")
            .setSmallIcon(android.R.drawable.ic_media_play)
            .build()
    }

    private fun startWakeWordDetection() {
        try {
            wakeWordDetector.startListening()
            Log.d(TAG, "D√©tection d√©marr√©e")
        } catch (e: Exception) {
            Log.e(TAG, "Erreur d√©marrage d√©tection", e)
        }
    }

    private fun startFullRecognition() {
        val intent = Intent(this, FullRecognitionService::class.java)
        startService(intent)
        Log.d(TAG, "Reconnaissance d√©marr√©e")
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "Arr√™t service d√©tection")
        wakeWordDetector.stopListening()
    }

    override fun onBind(intent: Intent?): IBinder? = null
}
FILE

# ==================== V√âRIFICATIONS ====================
echo ""
echo "=== ‚úÖ V√âRIFICATIONS ==="

# V√©rifier correction appliqu√©e
echo "=== üîç CORRECTION APPLIQU√âE ==="
grep -A 3 -B 3 "startWakeWordDetection()" app/src/main/java/com/magiccontrol/service/WakeWordService.kt

echo ""
echo "üéØ √âCOUTE IMM√âDIATE ACTIV√âE"
echo "üìä R√©sum√©: Plus de d√©lai 3s - √âcoute active d√®s le d√©marrage"
echo "üöÄ PUSH: git add . && git commit -m 'FIX: √âcoute imm√©diate sans d√©lai 3 secondes' && git push"
