#!/bin/bash
cd /data/data/com.termux/files/home/magic-sync-forge

echo "üîß Application des corrections cibl√©es..."

# Sauvegarde du fichier actuel
cp app/src/main/java/com/magiccontrol/service/WakeWordService.kt app/src/main/java/com/magiccontrol/service/WakeWordService.kt.pre_fix

# Correction des probl√®mes identifi√©s
python3 << 'PYTHON_SCRIPT'
import re

# Lire le fichier
with open('app/src/main/java/com/magiccontrol/service/WakeWordService.kt', 'r', encoding='utf-8') as f:
    content = f.read()

print("üîç Correction des probl√®mes identifi√©s...")

# CORRECTION 1: Indentation ligne 124
print("üìù Correction indentation ligne 124...")
lines = content.split('\n')
if len(lines) >= 124:
    # V√©rifier et corriger l'indentation de la ligne 124
    if lines[123].strip() == "wakeWordDetector?.stopListening()  // üîß ARR√äTER √âCOUTE PENDANT TRAITEMENT":
        lines[123] = "        wakeWordDetector?.stopListening()  // üîß ARR√äTER √âCOUTE PENDANT TRAITEMENT"
        print("‚úÖ Indentation ligne 124 corrig√©e")

# Reconstruire le contenu
content = '\n'.join(lines)

# CORRECTION 2: Am√©lioration de la fonction onWakeWordDetected
print("üìù Am√©lioration fonction onWakeWordDetected...")
old_on_wakeword = '''private fun onWakeWordDetected() {
    Log.d(TAG, "üéØ Traitement mot-cl√© d√©tect√©")
    TTSManager.speak(applicationContext, "Oui?")
        wakeWordDetector?.stopListening()  // üîß ARR√äTER √âCOUTE PENDANT TRAITEMENT
    // Lancer reconnaissance compl√®te
    Handler(Looper.getMainLooper()).postDelayed({
        val intent = Intent(this, FullRecognitionService::class.java)
        startService(intent)
    }, 1000L)
}'''

new_on_wakeword = '''private fun onWakeWordDetected() {
    Log.d(TAG, "üéØ Traitement mot-cl√© d√©tect√© - Transition vers reconnaissance")
    
    try {
        // 1. Feedback vocal imm√©diat
        TTSManager.speak(applicationContext, "Oui?")
        
        // 2. D√©marrer reconnaissance compl√®te IMM√âDIATEMENT
        val intent = Intent(this, FullRecognitionService::class.java)
        startService(intent)
        Log.d(TAG, "üöÄ FullRecognitionService d√©marr√©")
        
        // 3. Arr√™ter √©coute actuelle APR√àS d√©marrage nouveau service
        Handler(Looper.getMainLooper()).postDelayed({
            Log.d(TAG, "üîÑ Arr√™t √©coute wake word")
            wakeWordDetector?.stopListening()
        }, 500L)
        
    } catch (e: Exception) {
        Log.e(TAG, "‚ùå Erreur transition services", e)
    }
}'''

if old_on_wakeword in content:
    content = content.replace(old_on_wakeword, new_on_wakeword)
    print("‚úÖ Fonction onWakeWordDetected am√©lior√©e")
else:
    print("‚ùå Ancienne fonction non trouv√©e, recherche alternative...")
    # Recherche par pattern
    pattern = r'private fun onWakeWordDetected\(\) \{.*?Handler\(Looper\.getMainLooper\(\)\)\.postDelayed\(\{.*?startService\(intent\).*?\}, 1000L\).*?\}'
    if re.search(pattern, content, re.DOTALL):
        content = re.sub(pattern, new_on_wakeword, content, flags=re.DOTALL)
        print("‚úÖ Fonction remplac√©e via pattern")

# CORRECTION 3: V√©rification √©quilibre braces
open_braces = content.count('{')
close_braces = content.count('}')
print(f"üìä √âquilibre braces: {open_braces}/{open_braces} vs {close_braces}/{close_braces}")

if open_braces != close_braces:
    print("üîß R√©√©quilibrage des braces...")
    # Forcer l'√©quilibre
    if open_braces > close_braces:
        content += '\n}' * (open_braces - close_braces)
    else:
        content = content.rstrip() + '\n}' * (close_braces - open_braces)

# R√©√©crire le fichier
with open('app/src/main/java/com/magiccontrol/service/WakeWordService.kt', 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ Corrections cibl√©es appliqu√©es")
PYTHON_SCRIPT

echo ""
echo "üîç V√âRIFICATION DU FICHIER CORRIG√â"
echo "=================================="

# Afficher le fichier corrig√© avec num√©ros de ligne
echo "üìã FICHIER WAKE WORD SERVICE CORRIG√â (avec num√©ros de ligne):"
echo "------------------------------------------------------------"
cat -n app/src/main/java/com/magiccontrol/service/WakeWordService.kt

echo ""
echo "üîç V√âRIFICATIONS GLOBALES"
echo "========================"

# V√©rification 1: Braces √©quilibr√©es
echo "üìã V√©rification braces √©quilibr√©es..."
open_braces=$(grep -o "{" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | wc -l)
close_braces=$(grep -o "}" app/src/main/java/com/magiccontrol/service/WakeWordService.kt | wc -l)

if [ "$open_braces" -eq "$close_braces" ]; then
    echo "‚úÖ Braces √©quilibr√©es: $open_braces/{ $close_braces/}"
else
    echo "‚ùå Braces d√©s√©quilibr√©es: $open_braces/{ $close_braces/}"
    exit 1
fi

# V√©rification 2: Structure Kotlin
echo "üìã V√©rification structure Kotlin..."
if grep -q "class WakeWordService" app/src/main/java/com/magiccontrol/service/WakeWordService.kt && \
   grep -q "override fun onBind" app/src/main/java/com/magiccontrol/service/WakeWordService.kt && \
   grep -q "private val TAG" app/src/main/java/com/magiccontrol/service/WakeWordService.kt; then
    echo "‚úÖ Structure Kotlin valide"
else
    echo "‚ùå Structure Kotlin probl√©matique"
    exit 1
fi

# V√©rification 3: Indentation corrig√©e
echo "üìã V√©rification indentation..."
if ! grep -q "^wakeWordDetector" app/src/main/java/com/magiccontrol/service/WakeWordService.kt; then
    echo "‚úÖ Indentation corrig√©e"
else
    echo "‚ùå Probl√®mes d'indentation d√©tect√©s"
    exit 1
fi

# V√©rification 4: Fonction onWakeWordDetected am√©lior√©e
echo "üìã V√©rification fonction onWakeWordDetected..."
if grep -q "Transition vers reconnaissance" app/src/main/java/com/magiccontrol/service/WakeWordService.kt && \
   grep -q "FullRecognitionService d√©marr√©" app/src/main/java/com/magiccontrol/service/WakeWordService.kt; then
    echo "‚úÖ Fonction onWakeWordDetected am√©lior√©e"
else
    echo "‚ùå Fonction onWakeWordDetected non corrig√©e"
    exit 1
fi

# V√©rification 5: Encodage
echo "üìã V√©rification encodage..."
if file -i app/src/main/java/com/magiccontrol/service/WakeWordService.kt | grep -q "utf-8"; then
    echo "‚úÖ Encodage UTF-8 correct"
else
    echo "‚ùå Probl√®me d'encodage"
    exit 1
fi

echo ""
echo "üéâ CORRECTION WAKE WORD SERVICE TERMIN√âE AVEC SUCC√àS !"
