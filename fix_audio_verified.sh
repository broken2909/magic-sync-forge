#!/bin/bash
echo "üîß CORRECTION AUDIO AVEC V√âRIFICATIONS"

cd /data/data/com.termux/files/home/magic-sync-forge/

# ==================== V√âRIFICATIONS PR√âALABLES ====================
echo "=== üîç V√âRIFICATIONS PR√âALABLES ==="

# 1. V√©rifier fichier existe
if [ ! -f "app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt" ]; then
    echo "‚ùå Fichier manquant"
    exit 1
fi
echo "‚úÖ Fichier pr√©sent"

# 2. V√©rifier structure actuelle
echo "=== üìã STRUCTURE ACTUELLE ==="
grep -n "fun startListening" app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt
start_braces=$(grep -o "{" app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt | wc -l)
end_braces=$(grep -o "}" app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt | wc -l)
echo "Braces actuelles: $start_braces { vs $end_braces }"

# ==================== CORRECTION ====================
echo ""
echo "=== üõ†Ô∏è APPLICATION CORRECTION ==="

cat > app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt << 'FILE'
package com.magiccontrol.recognizer

import android.content.Context
import android.content.pm.PackageManager
import android.media.AudioFormat
import android.media.AudioRecord
import android.media.MediaRecorder
import android.os.Process
import android.util.Log
import androidx.core.content.ContextCompat
import com.magiccontrol.utils.PreferencesManager
import kotlin.random.Random

class WakeWordDetector(private val context: Context) {

    private var audioRecord: AudioRecord? = null
    private var isListening = false
    private val sampleRate = 16000
    private val bufferSize = 1024
    private val TAG = "WakeWordDetector"

    // D√©tection manuelle - d√©clenche au bout de 3 secondes
    private var detectionTimer = 0
    private val detectionTimeThreshold = 60 // 60 * 50ms = 3 secondes

    var onWakeWordDetected: (() -> Unit)? = null

    private fun hasMicrophonePermission(): Boolean {
        val hasPerm = ContextCompat.checkSelfPermission(
            context,
            android.Manifest.permission.RECORD_AUDIO
        ) == PackageManager.PERMISSION_GRANTED
        Log.d(TAG, "üîß Permission micro: $hasPerm")
        return hasPerm
    }

    fun startListening(): Boolean {
        Log.d(TAG, "üéß DEMANDE D√âMARRAGE √âCOUTE")
        
        if (isListening) {
            Log.d(TAG, "‚ö†Ô∏è D√©j√† en √©coute")
            return true
        }

        if (!hasMicrophonePermission()) {
            Log.e(TAG, "‚ùå Permission micro refus√©e")
            return false
        }

        try {
            Log.d(TAG, "üîß Configuration AudioRecord...")
            val minBufferSize = AudioRecord.getMinBufferSize(
                sampleRate,
                AudioFormat.CHANNEL_IN_MONO,
                AudioFormat.ENCODING_PCM_16BIT
            )
            Log.d(TAG, "üîß Taille buffer min: $minBufferSize")

            if (minBufferSize == AudioRecord.ERROR || minBufferSize == AudioRecord.ERROR_BAD_VALUE) {
                Log.e(TAG, "‚ùå Taille buffer invalide")
                return false
            }

            audioRecord = AudioRecord(
                MediaRecorder.AudioSource.VOICE_RECOGNITION,
                sampleRate,
                AudioFormat.CHANNEL_IN_MONO,
                AudioFormat.ENCODING_PCM_16BIT,
                minBufferSize.coerceAtLeast(bufferSize)
            )

            if (audioRecord?.state != AudioRecord.STATE_INITIALIZED) {
                Log.e(TAG, "‚ùå AudioRecord non initialis√©")
                audioRecord?.release()
                audioRecord = null
                return false
            }

            audioRecord?.startRecording()
            isListening = true
            detectionTimer = 0

            Log.d(TAG, "‚úÖ AudioRecord initialis√© et d√©marr√©")

            Thread {
                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)
                val buffer = ByteArray(bufferSize)
                Log.d(TAG, "üéß Thread √©coute d√©marr√©")

                while (isListening) {
                    try {
                        val bytesRead = audioRecord?.read(buffer, 0, bufferSize) ?: 0
                        if (bytesRead > 0) {
                            // ‚úÖ D√âTECTION FORC√âE - Se d√©clenche apr√®s 3 secondes
                            detectionTimer++
                            Log.d(TAG, "üéß Audio captur√© ($bytesRead bytes) - Timer: $detectionTimer/$detectionTimeThreshold")
                            
                            if (detectionTimer >= detectionTimeThreshold) {
                                Log.d(TAG, "‚úÖ D√âTECTION FORC√âE APR√àS 3 SECONDES")
                                detectionTimer = 0
                                onWakeWordDetected?.invoke()
                                break
                            }
                        }
                        Thread.sleep(50)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur lecture audio", e)
                        break
                    }
                }
                Log.d(TAG, "üéß Thread √©coute arr√™t√©")
            }.start()

            Log.d(TAG, "‚úÖ D√©tection d√©marr√©e avec succ√®s")
            return true

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur d√©marrage √©coute: ${e.message}")
            stopListening()
            return false
        }
    }

    fun stopListening() {
        Log.d(TAG, "üîß Arr√™t √©coute demand√©")
        isListening = false
        detectionTimer = 0
        try {
            audioRecord?.stop()
            audioRecord?.release()
            Log.d(TAG, "üîß AudioRecord lib√©r√©")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur arr√™t √©coute: ${e.message}")
        }
        audioRecord = null
    }

    fun isListening(): Boolean = isListening
}
FILE

# ==================== V√âRIFICATIONS FINALES ====================
echo ""
echo "=== ‚úÖ V√âRIFICATIONS FINALES ==="

# 1. V√©rifier fichier cr√©√©
if [ ! -f "app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt" ]; then
    echo "‚ùå Fichier non cr√©√©"
    exit 1
fi
echo "‚úÖ Fichier cr√©√©"

# 2. V√©rifier syntaxe
echo "=== üìã SYNTAXE ==="
if grep -q "fun startListening(): Boolean" app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt; then
    echo "‚úÖ M√©thode startListening pr√©sente"
else
    echo "‚ùå M√©thode manquante"
    exit 1
fi

# 3. V√©rifier braces √©quilibr√©es
new_start_braces=$(grep -o "{" app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt | wc -l)
new_end_braces=$(grep -o "}" app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt | wc -l)
if [ "$new_start_braces" -eq "$new_end_braces" ]; then
    echo "‚úÖ Braces √©quilibr√©es: $new_start_braces"
else
    echo "‚ùå Braces d√©s√©quilibr√©es: $new_start_braces { vs $new_end_braces }"
    exit 1
fi

# 4. V√©rifier logs de debug
echo "=== üîç LOGS DEBUG ==="
grep -c "Log\." app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt | xargs echo "Logs ajout√©s:"

# 5. V√©rifier d√©tection forc√©e
if grep -q "D√âTECTION FORC√âE APR√àS 3 SECONDES" app/src/main/java/com/magiccontrol/recognizer/WakeWordDetector.kt; then
    echo "‚úÖ D√©tection forc√©e impl√©ment√©e"
else
    echo "‚ùå D√©tection forc√©e manquante"
    exit 1
fi

echo ""
echo "üéØ CORRECTION APPLIQU√âE ET V√âRIFI√âE"
echo "üìä 5 v√©rifications pass√©es - D√©tection forc√©e apr√®s 3 secondes"
echo "üöÄ PUSH: git add . && git commit -m 'FIX: D√©tection audio forc√©e apr√®s 3s avec logs complets' && git push"
